https://stackify.com/log4net-guide-dotnet-logging/
Also check: https://stackify.com/web-config-customerrors-asp-net/

1. Add log4net Package
Starting with log4net is as easy as installing a Nuget package. 
You can use the Visual Studio UI to search for it and install it, 
or just run this quick command from the Package Manager Console.
PM> Install-Package log4net

2. Add log4net.config file
Add a new file to your project in Visual Studio called log4net.config and 
be sure to set a property for the file: 
Set “Copy to Output Directory” to “Copy Always”. 
This is important because we need the log4net.config file to be copied 
to the bin folder when you build and run your app.

Basic File
<log4net>
    <root>
      <level value="ALL" />
      <appender-ref ref="console" />
      <appender-ref ref="file" />
    </root>
    <appender name="console" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date %level %logger - %message%newline" />
      </layout>
    </appender>
    <appender name="file" type="log4net.Appender.RollingFileAppender">
      <file value="myapp.log" />
      <appendToFile value="true" />
      <rollingStyle value="Size" />
      <maxSizeRollBackups value="5" />
      <maximumFileSize value="10MB" />
      <staticLogFileName value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %level %logger - %message%newline" />
      </layout>
    </appender>
  </log4net>

3. Tell log4net to Load Your Config
The next thing we need to do is tell log4net where to load it’s configuratin from so that it actually works. 
I suggest putting this in your AssemblyInfo.cs file. 
You can find it under the Properties section in your project.
(Ex: \Log4NetSample2\Properties\AssemblyInfo.cs)
Add the following to the bottom of your AssemblyInfo file:
[assembly: log4net.Config.XmlConfigurator(ConfigFile = "log4net.config")]

4. Log Something!
Now you can modify your app to log something and try it out!

    class Program
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        static void Main(string[] args)
        {
            log.Info("Hello logging world!");
            Console.WriteLine("Hit enter");
            Console.ReadLine();
        }
    }

>> Log file location: \Log4NetSample2\bin\Debug\myapp.log

Make Good Use of Multiple Log Levels and Filter by Them
Be sure to use Debug, Info, Warning, Error, and Fatal logging levels as appropriate within your code. Don’t lot everything as Debug. Be sure to think about how you would be viewing the logs and what you want to see it later when coding your logging statements.

You can specify in your log4net config which log4net logging levels you want to log. This is really valuable if you want to specify only certain levels to be logged to a specific log appender or to reduce logging in production. This also you to log more or less data without changing your code.

log4net levels:

All – Log everything
Debug
Info
Warn
Error
Fatal
Off – Don’t log anything